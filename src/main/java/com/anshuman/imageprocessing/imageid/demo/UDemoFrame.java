package com.anshuman.imageprocessing.imageid.demo;

/**
 * User: Anshuman
 * Date: Sep 24, 2010
 * Time: 1:06:49 PM
 */



import com.anshuman.imageprocessing.imageid.data.ImageSignature;
import com.anshuman.imageprocessing.imageid.imageutil.ImageUtil;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UDemoFrame extends JFrame {

    private Color highlightHoverColor = Color.decode("#dddddd");
    private Color highlightSelectColor = Color.decode("#eeeeee");
    private SearchResultsTableModel tableModel = new SearchResultsTableModel();

    /**
     * Creates new form UDemoFrame
     */
    public UDemoFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        try {
            Image icon = ImageIO.read(getClass().getResource("/resources/viewmag16.png"));
            if (icon != null) setIconImage(icon);
        } catch (IOException ex) {
            Logger.getLogger(UDemoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        buttonSwitchIndex.setBackground(highlightSelectColor);

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


        topPane = new JPanel();
        controlPane = new JPanel();
        switchButtonsPanel = new JPanel();
        jPanel5 = new JPanel();
        buttonSwitchIndex = new JButton();
        buttonSwitchSearch = new JButton();

        buttonSwitchAbout = new JButton();
        cardPanel = new JPanel();
        indexPanel = new JPanel();
        textfieldIndexDir = new JTextField();
        JButton buttonOpenDir = new JButton();
        buttonStartIndexing = new JButton();
        progressBarIndexing = new JProgressBar();
        jLabel6 = new JLabel();
        jLabel8 = new JLabel();
        searchPanel = new JPanel();
        textfieldSearchImage = new JTextField();
        buttonOpenImage = new JButton();
        buttonStartSearch = new JButton();
        progressSearch = new JProgressBar();
        jLabel5 = new JLabel();
        jLabel7 = new JLabel();
        browsePanel = new JPanel();
        jLabel10 = new JLabel();
        labelDocCount = new JLabel();
        jLabel11 = new JLabel();
        spinnerCurrentDocNum = new JSpinner();
        spinnerMaxDocCount = new JSpinner();
        imageLabel = new JLabel();
        buttonSearchFromBrowse = new JButton();
        textfieldMosaicImage = new JTextField();
        progressMosaic = new JProgressBar();
        labelMosaicTitle = new JLabel();
        textfieldIndexName = new JTextField();
        jLabel3 = new JLabel();
        textfieldNumSearchResults = new JTextField();
        jLabel4 = new JLabel();
        jLabel17 = new JLabel();
        textFieldFlickrDownloadMax = new JTextField();
        resultsCardPane = new JPanel();
        resultsPane = new JScrollPane();
        resultsTable = new JTable();
        jPanel2 = new JPanel();
        buttonBackToSearch = new JButton();
        jLabel9 = new JLabel();
        jPanel1 = new JPanel();
        buttonBackToOptions = new JButton();
        frameMenu = new JMenuBar();
        fileMenu = new JMenu();
        fileMenuExit = new JMenuItem();
        viewMenu = new JMenu();
        vieMenuStartPage = new JMenuItem();
        viewMenuResults = new JMenuItem();
        helpMenu = new JMenu();
        helpMenuAbout = new JMenuItem();


        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("liredemo.frame.titel")); // NOI18N
        //setIconImages(null);

        topPane.setLayout(new CardLayout());

        controlPane.setLayout(new BorderLayout());

        switchButtonsPanel.setBackground(new Color(255, 255, 255));
        switchButtonsPanel.setBorder(BorderFactory.createEtchedBorder());
        switchButtonsPanel.setLayout(new BorderLayout());

        jPanel5.setBackground(new Color(255, 255, 255));
        jPanel5.setLayout(new GridLayout(1, 0));

        buttonSwitchIndex.setBackground(new Color(255, 255, 255));
        buttonSwitchIndex.setIcon(new ImageIcon(getClass().getResource("/resources/run.png"))); // NOI18N
        buttonSwitchIndex.setText("Index");
        buttonSwitchIndex.setBorderPainted(false);
        buttonSwitchIndex.setFocusPainted(false);
        buttonSwitchIndex.setHorizontalTextPosition(SwingConstants.CENTER);
        buttonSwitchIndex.setVerticalTextPosition(SwingConstants.BOTTOM);
        buttonSwitchIndex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonMouseOver(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonMouseOut(evt);
            }
        });
        buttonSwitchIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSwitchIndexActionPerformed(evt);
            }
        });
        jPanel5.add(buttonSwitchIndex);

        buttonSwitchSearch.setBackground(new Color(255, 255, 255));
        buttonSwitchSearch.setIcon(new ImageIcon(getClass().getResource("/resources/viewmag.png"))); // NOI18N
        buttonSwitchSearch.setText("Search");
        buttonSwitchSearch.setBorderPainted(false);
        buttonSwitchSearch.setFocusPainted(false);
        buttonSwitchSearch.setHorizontalTextPosition(SwingConstants.CENTER);
        buttonSwitchSearch.setVerticalTextPosition(SwingConstants.BOTTOM);
        buttonSwitchSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonMouseOver(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonMouseOut(evt);
            }
        });
        buttonSwitchSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSwitchIndexActionPerformed(evt);
            }
        });
        jPanel5.add(buttonSwitchSearch);


        buttonSwitchAbout.setBackground(new Color(255, 255, 255));
        buttonSwitchAbout.setIcon(new ImageIcon(getClass().getResource("/resources/help.png"))); // NOI18N
        buttonSwitchAbout.setText("About");
        buttonSwitchAbout.setBorderPainted(false);
        buttonSwitchAbout.setFocusPainted(false);
        buttonSwitchAbout.setHorizontalTextPosition(SwingConstants.CENTER);
        buttonSwitchAbout.setVerticalTextPosition(SwingConstants.BOTTOM);
        buttonSwitchAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonMouseOver(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonMouseOut(evt);
            }
        });
        buttonSwitchAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSwitchIndexActionPerformed(evt);
            }
        });
        jPanel5.add(buttonSwitchAbout);

        switchButtonsPanel.add(jPanel5, BorderLayout.WEST);

        controlPane.add(switchButtonsPanel, BorderLayout.NORTH);

        cardPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        cardPanel.setLayout(new CardLayout());

        textfieldIndexDir.setEditable(false);
        textfieldIndexDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //textfieldIndexDirActionPerformed(evt);
            }
        });

        buttonOpenDir.setText(bundle.getString("button.open.indexdirectory")); // NOI18N
        buttonOpenDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenDirActionPerformed(evt);
            }
        });

        buttonStartIndexing.setText(bundle.getString("button.start.indexing")); // NOI18N
        buttonStartIndexing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartIndexingActionPerformed(evt);
            }
        });

        progressBarIndexing.setFocusable(false);
        progressBarIndexing.setName(bundle.getString("progressbar.indexing.name")); // NOI18N
        progressBarIndexing.setString(bundle.getString("progressbar.indexing.name")); // NOI18N
        progressBarIndexing.setStringPainted(true);

        jLabel6.setFont(new Font("Tahoma", 1, 18));
        jLabel6.setText("Image Indexing:");

        jLabel8.setText("<html><b>Hints:</b>\n<ul>\n<li> Only images in the selected directory but also all <i>subdirectories</i> will be indexed.</ul>");


        GroupLayout indexPanelLayout = new GroupLayout(indexPanel);
        indexPanel.setLayout(indexPanelLayout);
        indexPanelLayout.setHorizontalGroup(
                indexPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addGroup(indexPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(indexPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(progressBarIndexing, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                                        .addGroup(indexPanelLayout.createSequentialGroup()
                                                .addComponent(textfieldIndexDir, GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonOpenDir, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, indexPanelLayout.createSequentialGroup()

                                                .addComponent(buttonStartIndexing, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                        .addGroup(indexPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8)
                                .addContainerGap(100, Short.MAX_VALUE))
        );
        indexPanelLayout.setVerticalGroup(
                indexPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(indexPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(indexPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonOpenDir)
                                        .addComponent(textfieldIndexDir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBarIndexing, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(indexPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonStartIndexing, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                )
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addGap(507, 507, 507))
        );

        cardPanel.add(indexPanel, "card3");

        textfieldSearchImage.setEditable(true);

        buttonOpenImage.setText(bundle.getString("button.open.searchimage")); // NOI18N
        buttonOpenImage.setActionCommand(bundle.getString("openImageButton")); // NOI18N
        buttonOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenImageActionPerformed(evt);
            }
        });
        buttonStartSearch.setText(bundle.getString("button.start.search")); // NOI18N
        buttonStartSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartSearchActionPerformed(evt);
            }
        });

        progressSearch.setString("Search state ...");
        progressSearch.setStringPainted(true);

        jLabel5.setFont(new Font("Tahoma", 1, 18));
        jLabel5.setText("Search for digital images:");

        jLabel7.setText("<html>\n<b>Hints:</b>\n<ul>\n<li> Note that a double click on a row within the search results starts a new search for the clicked image.\n<li>Use Drag'n'Drop to select query image from file explorer\n</ul>\n</html>");

        GroupLayout searchPanelLayout = new GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
                searchPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addGroup(searchPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(searchPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(progressSearch, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                                        .addGroup(searchPanelLayout.createSequentialGroup()
                                                .addComponent(textfieldSearchImage, GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonOpenImage))
                                        .addComponent(buttonStartSearch, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 106, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                        .addGroup(searchPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)
                                .addContainerGap(158, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
                searchPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(searchPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(searchPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(textfieldSearchImage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(buttonOpenImage))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressSearch, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonStartSearch)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addContainerGap(283, Short.MAX_VALUE)
                        )
        );

        cardPanel.add(searchPanel, "card2");

        jLabel10.setText("Current document:");

        labelDocCount.setText("/");

        jLabel11.setFont(new Font("Tahoma", 1, 18));
        jLabel11.setText("Browse Index:");

        spinnerCurrentDocNum.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCurrentDocNumStateChanged(evt);
            }
        });

        spinnerMaxDocCount.setEnabled(false);

        imageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        imageLabel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), BorderFactory.createEmptyBorder(5, 5, 5, 5)));

        buttonSearchFromBrowse.setText("Search");
        buttonSearchFromBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchFromBrowseActionPerformed(evt);
            }
        });

        GroupLayout browsePanelLayout = new GroupLayout(browsePanel);
        browsePanel.setLayout(browsePanelLayout);
        browsePanelLayout.setHorizontalGroup(
                browsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(browsePanelLayout.createSequentialGroup()
                                .addGroup(browsePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(browsePanelLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(imageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(GroupLayout.Alignment.LEADING, browsePanelLayout.createSequentialGroup()
                                                .addGroup(browsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel11)
                                                        .addGroup(browsePanelLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(jLabel10)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(spinnerCurrentDocNum, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(labelDocCount)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(spinnerMaxDocCount, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonSearchFromBrowse)))
                                .addContainerGap(407, Short.MAX_VALUE))
        );
        browsePanelLayout.setVerticalGroup(
                browsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(browsePanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(browsePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(spinnerCurrentDocNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelDocCount)
                                        .addComponent(spinnerMaxDocCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(buttonSearchFromBrowse))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imageLabel, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(135, Short.MAX_VALUE))
        );

        cardPanel.add(browsePanel, "card5");

        textfieldMosaicImage.setEditable(false);


        progressMosaic.setToolTipText(bundle.getString("mosaic.progress.tooltip")); // NOI18N
        progressMosaic.setString(bundle.getString("progressbar.mosaic.name")); // NOI18N
        progressMosaic.setStringPainted(true);

        labelMosaicTitle.setFont(new Font("Tahoma", 1, 18));
        labelMosaicTitle.setText("Select image to create Mosaic:");


        textfieldIndexName.setText("index");
        textfieldIndexName.setToolTipText(bundle.getString("options.tooltip.indexname")); // NOI18N

        jLabel3.setText("Number of search results:");

        textfieldNumSearchResults.setText("25");
        textfieldNumSearchResults.setToolTipText(bundle.getString("options.tooltip.numsearchresults")); // NOI18N

        jLabel4.setFont(new Font("Tahoma", 1, 18));
        jLabel4.setText("Options:");

        jLabel17.setText("Flickr download maximum:");

        textFieldFlickrDownloadMax.setText("100");

        controlPane.add(cardPanel, BorderLayout.CENTER);

        topPane.add(controlPane, "card2");

        resultsCardPane.setLayout(new BorderLayout());

        resultsTable.setModel(tableModel);
        resultsTable.setToolTipText(bundle.getString("table.tooltip")); // NOI18N
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        resultsPane.setViewportView(resultsTable);

        resultsCardPane.add(resultsPane, BorderLayout.CENTER);

        jPanel2.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel2.setLayout(new BorderLayout());

        buttonBackToSearch.setIcon(new ImageIcon(getClass().getResource("/resources/viewmag16.png"))); // NOI18N
        buttonBackToSearch.setToolTipText("Go back to search ...");
        buttonBackToSearch.setBorderPainted(false);
        buttonBackToSearch.setFocusPainted(false);
        buttonBackToSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackToSearchActionPerformed(evt);
            }
        });
        jPanel2.add(buttonBackToSearch, BorderLayout.EAST);

        jLabel9.setFont(new Font("Tahoma", 1, 18));
        jLabel9.setText("Search Results:");
        jPanel2.add(jLabel9, BorderLayout.WEST);

        jPanel1.setLayout(new BorderLayout());

        buttonBackToOptions.setIcon(new ImageIcon(getClass().getResource("/resources/configure16.png"))); // NOI18N
        buttonBackToOptions.setToolTipText("Go  to options ...");
        buttonBackToOptions.setBorderPainted(false);
        buttonBackToOptions.setFocusPainted(false);
        buttonBackToOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackToOptionsActionPerformed(evt);
            }
        });
        jPanel1.add(buttonBackToOptions, BorderLayout.EAST);

        jPanel2.add(jPanel1, BorderLayout.CENTER);

        resultsCardPane.add(jPanel2, BorderLayout.NORTH);

        topPane.add(resultsCardPane, "card4");

        getContentPane().add(topPane, BorderLayout.CENTER);

        fileMenu.setText(bundle.getString("menu.file")); // NOI18N

        fileMenuExit.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        fileMenuExit.setIcon(new ImageIcon(getClass().getResource("/resources/cancel16.png"))); // NOI18N
        fileMenuExit.setText(bundle.getString("menu.file.exit")); // NOI18N
        fileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuExitActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuExit);

        frameMenu.add(fileMenu);

        viewMenu.setText("View");

        vieMenuStartPage.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        vieMenuStartPage.setText("Start page");
        vieMenuStartPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vieMenuStartPageActionPerformed(evt);
            }
        });
        viewMenu.add(vieMenuStartPage);

        viewMenuResults.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        viewMenuResults.setText("Results");
        viewMenuResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuResultsActionPerformed(evt);
            }
        });
        viewMenu.add(viewMenuResults);


        frameMenu.add(viewMenu);

        helpMenu.setText(bundle.getString("menu.help")); // NOI18N

        helpMenuAbout.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuAbout.setIcon(new ImageIcon(getClass().getResource("/resources/help16.png"))); // NOI18N
        helpMenuAbout.setText(bundle.getString("menu.help.about")); // NOI18N
        helpMenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuAboutActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuAbout);

        frameMenu.add(helpMenu);

        setJMenuBar(frameMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void buttonSearchFromBrowseActionPerformed(java.awt.event.ActionEvent evt) {

        int docID = ((Integer) spinnerCurrentDocNum.getValue()).intValue();

        try {
            searchForDocument(docID);
        } catch (Exception e) {
            System.err.println(e);
        }


    }//GEN-LAST:event_buttonSearchFromBrowseActionPerformed

    private void spinnerCurrentDocNumStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCurrentDocNumStateChanged
        setDocumentImageIcon(((Integer) spinnerCurrentDocNum.getValue()).intValue());

    }

    private void setDocumentImageIcon(int docID) {
        if (docID < 0) return;
        if (docID > ImageSearcher.list.size()) return;
        try {
            ImageSignature pair = ImageSearcher.list.get(docID);
            ImageIcon icon = null;
            BufferedImage img = null;
            String file = pair.getFilePath();
            if (!file.startsWith("http:"))
                img = ImageIO.read(new java.io.FileInputStream(file));
            else
                img = ImageIO.read(new URL(file));
            icon = new ImageIcon(ImageUtil.scaleImage(img, Math.min(imageLabel.getWidth(), imageLabel.getHeight())));
            imageLabel.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, "Error loading image:\n" + e.toString(), "An error occurred", JOptionPane.ERROR_MESSAGE);
            System.err.println(e.toString());
        }

    }


    private void buttonBackToSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackToSearchActionPerformed
        ((CardLayout) topPane.getLayout()).first(topPane);
    }

    private void viewMenuResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuResultsActionPerformed
        ((CardLayout) topPane.getLayout()).last(topPane);
    }//GEN-LAST:event_viewMenuResultsActionPerformed

    private void vieMenuStartPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vieMenuStartPageActionPerformed
        ((CardLayout) topPane.getLayout()).first(topPane);
    }//GEN-LAST:event_vieMenuStartPageActionPerformed

    private void buttonSwitchIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSwitchIndexActionPerformed
        JButton button = (JButton) evt.getSource();
        if (!button.equals(buttonSwitchAbout)) {
            resetColor();
            button.setBackground(highlightSelectColor);
            CardLayout cl = (CardLayout) cardPanel.getLayout();
            cl.first(cardPanel);
            if (button.equals(buttonSwitchSearch)) {
                cl.next(cardPanel);
            }
        } else {
            showAbout();
        }
    }//GEN-LAST:event_buttonSwitchIndexActionPerformed


    private void resetColor() {
        buttonSwitchIndex.setBackground(Color.white);
        buttonSwitchSearch.setBackground(Color.white);

    }

    private void buttonMouseOut(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonMouseOut
        JButton button = (JButton) evt.getSource();
        if (button.getBackground().equals(highlightHoverColor)) button.setBackground(Color.white);
    }//GEN-LAST:event_buttonMouseOut

    private void buttonMouseOver(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonMouseOver
        JButton button = (JButton) evt.getSource();
        if (button.getBackground().equals(Color.white)) button.setBackground(highlightHoverColor);
    }//GEN-LAST:event_buttonMouseOver

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getClickCount() == 2) {
            String s = tableModel.getHits().getPath(resultsTable.getSelectedRow());
            try {
                searchForImage(s);
            } catch (IOException e) {
                e.printStackTrace();
            }
            //searchForDocument(resultsTable.getSelectedRow());
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private void searchForDocument(int tableRow) {

        String s = ImageSearcher.list.get(tableRow).getFilePath();
        try {
            searchForImage(s);
//            searchForImage(s);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void buttonStartSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartSearchActionPerformed

        if (textfieldSearchImage.getText().length() > 4) {


            try {
                BufferedImage bufferedImage = ImageIO.read(new File(textfieldSearchImage.getText()));
                bufferedImage = ImageUtil.scaleImage(bufferedImage, 128);
                JOptionPane.showMessageDialog(this, new JLabel(new ImageIcon(bufferedImage)));
                searchForImage(textfieldSearchImage.getText());
            } catch (FileNotFoundException ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a query image first.\n" +
                    "Use the \"Open image ...\" button to do this.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonStartSearchActionPerformed

    private void buttonStartIndexingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartIndexingActionPerformed

        if (textfieldIndexDir.getText().length() > 1) {
            IndexingThread t = new IndexingThread(this);
            buttonStartIndexing.setEnabled(false);
            t.start();

        } else {

        }

    }//GEN-LAST:event_buttonStartIndexingActionPerformed

    private void buttonOpenDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenDirActionPerformed
        JFileChooser jfc = new JFileChooser(".");
        jfc.setDialogTitle("Select directory to index ...");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                textfieldIndexDir.setText(jfc.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonOpenDirActionPerformed

    private void helpMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuAboutActionPerformed
        JOptionPane.showMessageDialog(this, "Help Me",
                " demo", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_helpMenuAboutActionPerformed

    private void showAbout() {
        JOptionPane.showMessageDialog(this, "Time Pass ",
                " demo", JOptionPane.PLAIN_MESSAGE);
    }

    private void fileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuExitActionPerformed
        System.exit(0);
    }


    private void buttonOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenImageActionPerformed

        JFileChooser jfc;
        String s = textfieldSearchImage.getText();
        if (s != null) {
            jfc = new JFileChooser(new File(s).getParent());
        } else {
            jfc = new JFileChooser();
        }

        jfc.setDialogTitle("Select image to search for ...");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG, PNG & GIF Images", "jpg", "gif", "png");
        jfc.setFileFilter(filter);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                textfieldSearchImage.setText(jfc.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonOpenImageActionPerformed


    private void buttonBackToOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackToOptionsActionPerformed
        // change to options tab ...
        CardLayout cl = (CardLayout) cardPanel.getLayout();
        cl.first(cardPanel);
        cl.last(cardPanel);
        // hide results ...
        ((CardLayout) topPane.getLayout()).first(topPane);
    }//GEN-LAST:event_buttonBackToOptionsActionPerformed


    private void searchForImage(String imagePath) throws FileNotFoundException, IOException {
        // setting to search panel:
        ((CardLayout) cardPanel.getLayout()).first(cardPanel);
        ((CardLayout) cardPanel.getLayout()).next(cardPanel);
        // switching away from search results ...
        ((CardLayout) topPane.getLayout()).first(topPane);
        final String path = imagePath;
        final JPanel frame = topPane;
        Thread t = new Thread() {
            public void run() {
                try {

                    ImageSearchHits hits = new ImageSearcher().search(path);

                    tableModel.setHits(hits, progressSearch);
                    Rectangle bounds = resultsTable.getCellRect(0, 0, true);


                    resultsPane.getViewport().setViewPosition(bounds.getLocation());
                } catch (Exception e) {
                    // Nothing to do here ....
                } finally {
                    resultsTable.setRowHeight(150);
                    resultsTable.getColumnModel().getColumn(1).setMaxWidth(150);
                    resultsTable.getColumnModel().getColumn(1).setMinWidth(150);
                    ((CardLayout) topPane.getLayout()).last(frame);
                    resultsTable.setEnabled(true);
                }
            }
        };
        t.start();

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UDemoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel browsePanel;
    private JButton buttonBackToOptions;
    private JButton buttonBackToSearch;
    private JButton buttonOpenImage;
    private JButton buttonSearchFromBrowse;
    public JButton buttonStartIndexing;
    private JButton buttonSwitchAbout;
    private JButton buttonSwitchIndex;
    private JButton buttonSwitchSearch;
    private JPanel cardPanel;

    private JPanel controlPane;
    private JMenu fileMenu;
    private JMenuItem fileMenuExit;
    private JMenuBar frameMenu;
    private JMenu helpMenu;
    private JMenuItem helpMenuAbout;
    private JLabel imageLabel;
    private JPanel indexPanel;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel17;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;


    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel5;
    private JLabel labelDocCount;
    private JLabel labelMosaicTitle;
    public JProgressBar progressBarIndexing;
    private JProgressBar progressMosaic;
    private JProgressBar progressSearch;
    private JPanel resultsCardPane;
    private JScrollPane resultsPane;
    private JTable resultsTable;
    private JPanel searchPanel;
    private JButton buttonStartSearch;

    private JSpinner spinnerCurrentDocNum;
    private JSpinner spinnerMaxDocCount;
    private JPanel switchButtonsPanel;
    private JTextField textFieldFlickrDownloadMax;
    public JTextField textfieldIndexDir;
    public JTextField textfieldIndexName;
    private JTextField textfieldMosaicImage;
    private JTextField textfieldNumSearchResults;
    private JTextField textfieldSearchImage;
    private JPanel topPane;
    private JMenuItem vieMenuStartPage;
    private JMenu viewMenu;

    private JMenuItem viewMenuResults;

}
